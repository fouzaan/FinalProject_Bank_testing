# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestfour():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testfour(self):
    self.driver.get("https://demo.guru99.com/V4/manager/addAccount.php")
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Customer ID is required"
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys("1234Acc")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Characters are not allowed"
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys("123!@#")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Special characters are not allowed"
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys("123 12")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Characters are not allowed"
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys(" ")
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.ID, "message14").click()
    assert self.driver.switch_to.alert.text == "First character cannot have space"
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Initial Deposit must not be blank"
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys("1234Acc")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Characters are not allowed"
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys("123!@#")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Special characters are not allowed"
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys("123 12")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "Special characters are not allowed"
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > td:nth-child(2)").click()
    assert self.driver.switch_to.alert.text == "First character cannot have space"
    self.driver.find_element(By.NAME, "selaccount").click()
    dropdown = self.driver.find_element(By.NAME, "selaccount")
    dropdown.find_element(By.XPATH, "//option[. = 'Savings']").click()
    dropdown = self.driver.find_element(By.NAME, "selaccount")
    dropdown.find_element(By.XPATH, "//option[. = 'Current']").click()
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys(" qwer")
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys(" 123456")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > td:nth-child(2)").click()
    self.driver.find_element(By.NAME, "reset").click()
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys("123456")
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys("12345")
    self.driver.find_element(By.NAME, "button2").click()
    assert self.driver.switch_to.alert.text == "Customer does not exist!!"
    self.driver.find_element(By.NAME, "cusid").click()
    self.driver.find_element(By.NAME, "cusid").send_keys("35203")
    self.driver.find_element(By.NAME, "inideposit").click()
    self.driver.find_element(By.NAME, "inideposit").send_keys("125000")
    self.driver.find_element(By.NAME, "button2").click()
    self.driver.find_element(By.CSS_SELECTOR, "#Accmsg > tbody > tr > td").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(11) > td").click()
    assert self.driver.title == "Account Generated Successfully!!!"
    self.driver.find_element(By.LINK_TEXT, "Continue").click()
    self.driver.find_element(By.CSS_SELECTOR, ".heading3:nth-child(1)").click()
    self.driver.find_element(By.CSS_SELECTOR, ".heading3 > td").click()
    assert self.driver.title == "Welcome To Manager\'s Page of Guru99 Bank"
  
if __name__ == "__main__":
    pytest.main()